// Generated by Haxe 3.4.4
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Drawer = function(stage) {
	this.stage = stage;
	this.wallGraphics = new PIXI.Graphics();
	stage.addChild(this.wallGraphics);
	this.bitmaps = [];
	var _g = 0;
	while(_g < 24) {
		var i = _g++;
		this.bitmaps[i] = [];
		var _g1 = 0;
		while(_g1 < 50) {
			var j = _g1++;
			var bitmap = new PIXI.extras.BitmapText("",{ font : "font", tint : 16777215});
			this.bitmaps[i][j] = bitmap;
			bitmap.position.set(8 + j * 15,i * 25);
			stage.addChild(bitmap);
		}
	}
};
Drawer.prototype = {
	clear: function() {
		var _g = 0;
		while(_g < 24) {
			var i = _g++;
			var _g1 = 0;
			while(_g1 < 50) {
				var j = _g1++;
				this.bitmaps[i][j].text = "";
			}
		}
		this.wallGraphics.clear();
	}
	,setCharacter: function(x,y,character,color) {
		if(color == null) {
			color = 16777215;
		}
		this.bitmaps[y][x].text = character;
		this.bitmaps[y][x].tint = color;
	}
	,setWall: function(x,y,color) {
		if(color == null) {
			color = 16777215;
		}
		this.wallGraphics.beginFill(color);
		this.wallGraphics.drawRect(x * 15 + 8,y * 25 + 5,15,25);
		this.wallGraphics.endFill();
	}
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.prototype = {
	split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
};
var Game = function(application,stage,gameRect) {
	this.application = application;
	this.stage = stage;
	this.rect = gameRect;
	this.drawer = new Drawer(stage);
	this.drawer.clear();
	this.drawer.setCharacter(0,0,"&",16776960);
	this.drawer.setCharacter(1,1,"@",16776960);
	this.drawer.setCharacter(2,1,"*",65280);
	this.drawer.setCharacter(3,2,"!",65280);
	this.drawer.setWall(0,1);
	this.drawer.setWall(1,0);
	this.drawer.setWall(2,0);
	this.drawer.setWall(3,0);
	this.drawer.setWall(3,1);
};
Game.prototype = {
	update: function(timeMod) {
	}
};
var GameLoader = function(then) {
	this.loader = new PIXI.loaders.Loader();
	this.loader.add("fonts/font-export.fnt");
	this.loader["use"](function(res,next) {
		next();
	});
	this.loader.load(then);
};
GameLoader.prototype = {
	update: function() {
		console.log(this.loader.progress + "% loaded");
	}
};
var HxOverrides = function() { };
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.legacy = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.prototype = {
	start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width | 0;
		renderingOptions.height = this.height | 0;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.legacy = this.legacy;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.forceCanvas = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
};
var Main = function() {
	pixi_plugins_app_Application.call(this);
	this.init();
};
Main.main = function() {
	new Main();
};
Main.__super__ = pixi_plugins_app_Application;
Main.prototype = $extend(pixi_plugins_app_Application.prototype,{
	init: function() {
		var _gthis = this;
		this.autoResize = false;
		this.onUpdate = $bind(this,this.update);
		this.backgroundColor = 0;
		this.clearBeforeRender = true;
		this.width = 772;
		this.height = 610;
		this.initConfig();
		pixi_plugins_app_Application.prototype.start.call(this);
		this.gameRect = new common_Rectangle(0,0,772,610);
		this.loader = new GameLoader(function() {
			console.log("loaded");
			_gthis.loader = null;
			_gthis.game = new Game(_gthis,_gthis.stage,_gthis.gameRect);
		});
		this.canvas.addEventListener("contextmenu",function(ev) {
			ev.preventDefault();
			return false;
		});
	}
	,initConfig: function() {
		try {
			var params = haxe_web_Request.getParams();
		} catch( e ) {
		}
	}
	,update: function(elapsedTime) {
		if(this.game != null) {
			this.game.update(elapsedTime);
		} else if(this.loader != null) {
			this.loader.update();
		}
	}
});
var common_Rectangle = function(x,y,width,height) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
var common_Point = function() { };
var haxe_IMap = function() { };
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
};
var haxe_web_Request = function() { };
haxe_web_Request.getParams = function() {
	var get = HxOverrides.substr(window.location.search,1,null);
	var params = new haxe_ds_StringMap();
	var _g = 0;
	var _g1 = new EReg("[&;]","g").split(get);
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		var pl = p.split("=");
		if(pl.length < 2) {
			continue;
		}
		var name = pl.shift();
		var key = decodeURIComponent(name.split("+").join(" "));
		var s = pl.join("=");
		var value = decodeURIComponent(s.split("+").join(" "));
		if(__map_reserved[key] != null) {
			params.setReserved(key,value);
		} else {
			params.h[key] = value;
		}
	}
	return params;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
var __map_reserved = {};
Main.main();
})();

//# sourceMappingURL=game_js.js.map